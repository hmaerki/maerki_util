[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
name = "maerki_util"

dynamic = ["version"]
description = "maerki_util"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "proprietary"}
authors = [
    { name = "Hans MÃ¤rki", email = "buhtig.hans.maerki@ergoinfo.ch" },
]
classifiers = [
]

dependencies = [
    "typer-slim==0.20.0",
    "reportlab==4.4.4",
    "pillow==12.0.0",
    "openpyxl==3.1.5",
    "wxPython==4.2.3",
    "pywin32==311",
]

[project.optional-dependencies]

dev = [
    # "-e .
    "pytest",
    "mypy",
    "ruff",
]


[project.scripts]
wxpyscan = "pyscan.wxPyScan:main"

[project.urls]
Homepage = "https://github.com/hmaerki/maerki_util"
Documentation = "https://github.com/hmaerki/maerki_util"
Repository = "https://github.com/hmaerki/maerki_util"

[tool.pdm]
version = { source = "file", path = "src/pyimages2pdf/__init__.py" }
distribution = true

[tool.pdm.build]
package-dir = "src"
includes = [
    "src/",
]
source-includes = [
    "LICENSE",
    "README.md"
]

[tool.ruff]
target-version = "py313"
# All paths are relative to the project root, which is the directory containing the pyproject.toml.
src = ["src", "tests", "measurement_actual"]
exclude = []

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    # "I",  # isort
    "I001", # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    # "W191",  # indentation contains tabs
    "D",     # enable docstring checks
    "B027",  #  empty method in an abstract base class
]

[tool.ruff.lint.per-file-ignores]
"pymeas2019_noise/__init__.py" = ["F401", "I001"]

[tool.ruff.lint.isort]
# known-third-party = ["usbhubctl"]
# known-local-folder = ["usbhubctl"]
case-sensitive = true
combine-as-imports = true
order-by-type = false
section-order = [
  "future",
  "standard-library",
  "third-party",
  "first-party",
  "local-folder",
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.mypy]
# strict = true
# enable_incomplete_feature = ["NewGenericSyntax"]

[[tool.mypy.overrides]]
module = "scipy.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "ad_low_noise_float_2023_decoder.*"
ignore_missing_imports = true
